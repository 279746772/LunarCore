// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class MazeGroupOuterClass {
  /**
   * Protobuf type {@code MazeGroup}
   */
  public static final class MazeGroup extends ProtoMessage<MazeGroup> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional int64 MCKACFLLDHL = 7;</code>
     */
    private long mCKACFLLDHL;

    /**
     * <code>optional uint32 group_id = 10;</code>
     */
    private int groupId;

    /**
     * <code>optional bool BENLBEGJIMH = 6;</code>
     */
    private boolean bENLBEGJIMH;

    /**
     * <code>repeated uint32 ALDIKBFEFNM = 4;</code>
     */
    private final RepeatedInt aLDIKBFEFNM = RepeatedInt.newEmptyInstance();

    private MazeGroup() {
    }

    /**
     * @return a new empty instance of {@code MazeGroup}
     */
    public static MazeGroup newInstance() {
      return new MazeGroup();
    }

    /**
     * <code>optional int64 MCKACFLLDHL = 7;</code>
     * @return whether the mCKACFLLDHL field is set
     */
    public boolean hasMCKACFLLDHL() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional int64 MCKACFLLDHL = 7;</code>
     * @return this
     */
    public MazeGroup clearMCKACFLLDHL() {
      bitField0_ &= ~0x00000001;
      mCKACFLLDHL = 0L;
      return this;
    }

    /**
     * <code>optional int64 MCKACFLLDHL = 7;</code>
     * @return the mCKACFLLDHL
     */
    public long getMCKACFLLDHL() {
      return mCKACFLLDHL;
    }

    /**
     * <code>optional int64 MCKACFLLDHL = 7;</code>
     * @param value the mCKACFLLDHL to set
     * @return this
     */
    public MazeGroup setMCKACFLLDHL(final long value) {
      bitField0_ |= 0x00000001;
      mCKACFLLDHL = value;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 10;</code>
     * @return whether the groupId field is set
     */
    public boolean hasGroupId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 group_id = 10;</code>
     * @return this
     */
    public MazeGroup clearGroupId() {
      bitField0_ &= ~0x00000002;
      groupId = 0;
      return this;
    }

    /**
     * <code>optional uint32 group_id = 10;</code>
     * @return the groupId
     */
    public int getGroupId() {
      return groupId;
    }

    /**
     * <code>optional uint32 group_id = 10;</code>
     * @param value the groupId to set
     * @return this
     */
    public MazeGroup setGroupId(final int value) {
      bitField0_ |= 0x00000002;
      groupId = value;
      return this;
    }

    /**
     * <code>optional bool BENLBEGJIMH = 6;</code>
     * @return whether the bENLBEGJIMH field is set
     */
    public boolean hasBENLBEGJIMH() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool BENLBEGJIMH = 6;</code>
     * @return this
     */
    public MazeGroup clearBENLBEGJIMH() {
      bitField0_ &= ~0x00000004;
      bENLBEGJIMH = false;
      return this;
    }

    /**
     * <code>optional bool BENLBEGJIMH = 6;</code>
     * @return the bENLBEGJIMH
     */
    public boolean getBENLBEGJIMH() {
      return bENLBEGJIMH;
    }

    /**
     * <code>optional bool BENLBEGJIMH = 6;</code>
     * @param value the bENLBEGJIMH to set
     * @return this
     */
    public MazeGroup setBENLBEGJIMH(final boolean value) {
      bitField0_ |= 0x00000004;
      bENLBEGJIMH = value;
      return this;
    }

    /**
     * <code>repeated uint32 ALDIKBFEFNM = 4;</code>
     * @return whether the aLDIKBFEFNM field is set
     */
    public boolean hasALDIKBFEFNM() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 ALDIKBFEFNM = 4;</code>
     * @return this
     */
    public MazeGroup clearALDIKBFEFNM() {
      bitField0_ &= ~0x00000008;
      aLDIKBFEFNM.clear();
      return this;
    }

    /**
     * <code>repeated uint32 ALDIKBFEFNM = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableALDIKBFEFNM()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getALDIKBFEFNM() {
      return aLDIKBFEFNM;
    }

    /**
     * <code>repeated uint32 ALDIKBFEFNM = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableALDIKBFEFNM() {
      bitField0_ |= 0x00000008;
      return aLDIKBFEFNM;
    }

    /**
     * <code>repeated uint32 ALDIKBFEFNM = 4;</code>
     * @param value the aLDIKBFEFNM to add
     * @return this
     */
    public MazeGroup addALDIKBFEFNM(final int value) {
      bitField0_ |= 0x00000008;
      aLDIKBFEFNM.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 ALDIKBFEFNM = 4;</code>
     * @param values the aLDIKBFEFNM to add
     * @return this
     */
    public MazeGroup addAllALDIKBFEFNM(final int... values) {
      bitField0_ |= 0x00000008;
      aLDIKBFEFNM.addAll(values);
      return this;
    }

    @Override
    public MazeGroup copyFrom(final MazeGroup other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        mCKACFLLDHL = other.mCKACFLLDHL;
        groupId = other.groupId;
        bENLBEGJIMH = other.bENLBEGJIMH;
        aLDIKBFEFNM.copyFrom(other.aLDIKBFEFNM);
      }
      return this;
    }

    @Override
    public MazeGroup mergeFrom(final MazeGroup other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasMCKACFLLDHL()) {
        setMCKACFLLDHL(other.mCKACFLLDHL);
      }
      if (other.hasGroupId()) {
        setGroupId(other.groupId);
      }
      if (other.hasBENLBEGJIMH()) {
        setBENLBEGJIMH(other.bENLBEGJIMH);
      }
      if (other.hasALDIKBFEFNM()) {
        getMutableALDIKBFEFNM().addAll(other.aLDIKBFEFNM);
      }
      return this;
    }

    @Override
    public MazeGroup clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      mCKACFLLDHL = 0L;
      groupId = 0;
      bENLBEGJIMH = false;
      aLDIKBFEFNM.clear();
      return this;
    }

    @Override
    public MazeGroup clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aLDIKBFEFNM.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MazeGroup)) {
        return false;
      }
      MazeGroup other = (MazeGroup) o;
      return bitField0_ == other.bitField0_
        && (!hasMCKACFLLDHL() || mCKACFLLDHL == other.mCKACFLLDHL)
        && (!hasGroupId() || groupId == other.groupId)
        && (!hasBENLBEGJIMH() || bENLBEGJIMH == other.bENLBEGJIMH)
        && (!hasALDIKBFEFNM() || aLDIKBFEFNM.equals(other.aLDIKBFEFNM));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 56);
        output.writeInt64NoTag(mCKACFLLDHL);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 48);
        output.writeBoolNoTag(bENLBEGJIMH);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < aLDIKBFEFNM.length(); i++) {
          output.writeRawByte((byte) 32);
          output.writeUInt32NoTag(aLDIKBFEFNM.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeInt64SizeNoTag(mCKACFLLDHL);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * aLDIKBFEFNM.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(aLDIKBFEFNM);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MazeGroup mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 56: {
            // mCKACFLLDHL
            mCKACFLLDHL = input.readInt64();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 80) {
              break;
            }
          }
          case 80: {
            // groupId
            groupId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // bENLBEGJIMH
            bENLBEGJIMH = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // aLDIKBFEFNM [packed=true]
            input.readPackedUInt32(aLDIKBFEFNM, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 32: {
            // aLDIKBFEFNM [packed=false]
            tag = input.readRepeatedUInt32(aLDIKBFEFNM, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeInt64(FieldNames.mCKACFLLDHL, mCKACFLLDHL);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.groupId, groupId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.bENLBEGJIMH, bENLBEGJIMH);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.aLDIKBFEFNM, aLDIKBFEFNM);
      }
      output.endObject();
    }

    @Override
    public MazeGroup mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -599616167: {
            if (input.isAtField(FieldNames.mCKACFLLDHL)) {
              if (!input.trySkipNullValue()) {
                mCKACFLLDHL = input.readInt64();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 293428218:
          case 506361563: {
            if (input.isAtField(FieldNames.groupId)) {
              if (!input.trySkipNullValue()) {
                groupId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1536795933: {
            if (input.isAtField(FieldNames.bENLBEGJIMH)) {
              if (!input.trySkipNullValue()) {
                bENLBEGJIMH = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1230000255: {
            if (input.isAtField(FieldNames.aLDIKBFEFNM)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(aLDIKBFEFNM);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MazeGroup clone() {
      return new MazeGroup().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MazeGroup parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MazeGroup(), data).checkInitialized();
    }

    public static MazeGroup parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MazeGroup(), input).checkInitialized();
    }

    public static MazeGroup parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MazeGroup(), input).checkInitialized();
    }

    /**
     * @return factory for creating MazeGroup messages
     */
    public static MessageFactory<MazeGroup> getFactory() {
      return MazeGroupFactory.INSTANCE;
    }

    private enum MazeGroupFactory implements MessageFactory<MazeGroup> {
      INSTANCE;

      @Override
      public MazeGroup create() {
        return MazeGroup.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName mCKACFLLDHL = FieldName.forField("MCKACFLLDHL");

      static final FieldName groupId = FieldName.forField("groupId", "group_id");

      static final FieldName bENLBEGJIMH = FieldName.forField("BENLBEGJIMH");

      static final FieldName aLDIKBFEFNM = FieldName.forField("ALDIKBFEFNM");
    }
  }
}
