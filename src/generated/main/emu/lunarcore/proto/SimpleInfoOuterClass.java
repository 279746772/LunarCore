// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.Utf8String;

public final class SimpleInfoOuterClass {
  /**
   * Protobuf type {@code SimpleInfo}
   */
  public static final class SimpleInfo extends ProtoMessage<SimpleInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional int64 last_active_time = 8;</code>
     */
    private long lastActiveTime;

    /**
     * <code>optional uint32 level = 1;</code>
     */
    private int level;

    /**
     * <code>optional uint32 JCKIEMDALOB = 7;</code>
     */
    private int jCKIEMDALOB;

    /**
     * <code>optional uint32 uid = 13;</code>
     */
    private int uid;

    /**
     * <code>optional uint32 profile_picture = 15;</code>
     */
    private int profilePicture;

    /**
     * <code>optional .FriendOnlineStatus online_status = 11;</code>
     */
    private int onlineStatus;

    /**
     * <code>optional .PlatformType platform_type = 14;</code>
     */
    private int platformType;

    /**
     * <code>optional bool KCKLEMNIDNK = 4;</code>
     */
    private boolean kCKLEMNIDNK;

    /**
     * <code>optional .FriendAvatarInfo friend_avatar_info = 12;</code>
     */
    private final FriendAvatarInfoOuterClass.FriendAvatarInfo friendAvatarInfo = FriendAvatarInfoOuterClass.FriendAvatarInfo.newInstance();

    /**
     * <code>optional string CHFJJPIKGCA = 3;</code>
     */
    private final Utf8String cHFJJPIKGCA = Utf8String.newEmptyInstance();

    /**
     * <code>optional string BMMMNJEPNKE = 5;</code>
     */
    private final Utf8String bMMMNJEPNKE = Utf8String.newEmptyInstance();

    /**
     * <code>optional string nickname = 6;</code>
     */
    private final Utf8String nickname = Utf8String.newEmptyInstance();

    /**
     * <code>optional string signature = 10;</code>
     */
    private final Utf8String signature = Utf8String.newEmptyInstance();

    private SimpleInfo() {
    }

    /**
     * @return a new empty instance of {@code SimpleInfo}
     */
    public static SimpleInfo newInstance() {
      return new SimpleInfo();
    }

    /**
     * <code>optional int64 last_active_time = 8;</code>
     * @return whether the lastActiveTime field is set
     */
    public boolean hasLastActiveTime() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional int64 last_active_time = 8;</code>
     * @return this
     */
    public SimpleInfo clearLastActiveTime() {
      bitField0_ &= ~0x00000001;
      lastActiveTime = 0L;
      return this;
    }

    /**
     * <code>optional int64 last_active_time = 8;</code>
     * @return the lastActiveTime
     */
    public long getLastActiveTime() {
      return lastActiveTime;
    }

    /**
     * <code>optional int64 last_active_time = 8;</code>
     * @param value the lastActiveTime to set
     * @return this
     */
    public SimpleInfo setLastActiveTime(final long value) {
      bitField0_ |= 0x00000001;
      lastActiveTime = value;
      return this;
    }

    /**
     * <code>optional uint32 level = 1;</code>
     * @return whether the level field is set
     */
    public boolean hasLevel() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 level = 1;</code>
     * @return this
     */
    public SimpleInfo clearLevel() {
      bitField0_ &= ~0x00000002;
      level = 0;
      return this;
    }

    /**
     * <code>optional uint32 level = 1;</code>
     * @return the level
     */
    public int getLevel() {
      return level;
    }

    /**
     * <code>optional uint32 level = 1;</code>
     * @param value the level to set
     * @return this
     */
    public SimpleInfo setLevel(final int value) {
      bitField0_ |= 0x00000002;
      level = value;
      return this;
    }

    /**
     * <code>optional uint32 JCKIEMDALOB = 7;</code>
     * @return whether the jCKIEMDALOB field is set
     */
    public boolean hasJCKIEMDALOB() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 JCKIEMDALOB = 7;</code>
     * @return this
     */
    public SimpleInfo clearJCKIEMDALOB() {
      bitField0_ &= ~0x00000004;
      jCKIEMDALOB = 0;
      return this;
    }

    /**
     * <code>optional uint32 JCKIEMDALOB = 7;</code>
     * @return the jCKIEMDALOB
     */
    public int getJCKIEMDALOB() {
      return jCKIEMDALOB;
    }

    /**
     * <code>optional uint32 JCKIEMDALOB = 7;</code>
     * @param value the jCKIEMDALOB to set
     * @return this
     */
    public SimpleInfo setJCKIEMDALOB(final int value) {
      bitField0_ |= 0x00000004;
      jCKIEMDALOB = value;
      return this;
    }

    /**
     * <code>optional uint32 uid = 13;</code>
     * @return whether the uid field is set
     */
    public boolean hasUid() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 uid = 13;</code>
     * @return this
     */
    public SimpleInfo clearUid() {
      bitField0_ &= ~0x00000008;
      uid = 0;
      return this;
    }

    /**
     * <code>optional uint32 uid = 13;</code>
     * @return the uid
     */
    public int getUid() {
      return uid;
    }

    /**
     * <code>optional uint32 uid = 13;</code>
     * @param value the uid to set
     * @return this
     */
    public SimpleInfo setUid(final int value) {
      bitField0_ |= 0x00000008;
      uid = value;
      return this;
    }

    /**
     * <code>optional uint32 profile_picture = 15;</code>
     * @return whether the profilePicture field is set
     */
    public boolean hasProfilePicture() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 profile_picture = 15;</code>
     * @return this
     */
    public SimpleInfo clearProfilePicture() {
      bitField0_ &= ~0x00000010;
      profilePicture = 0;
      return this;
    }

    /**
     * <code>optional uint32 profile_picture = 15;</code>
     * @return the profilePicture
     */
    public int getProfilePicture() {
      return profilePicture;
    }

    /**
     * <code>optional uint32 profile_picture = 15;</code>
     * @param value the profilePicture to set
     * @return this
     */
    public SimpleInfo setProfilePicture(final int value) {
      bitField0_ |= 0x00000010;
      profilePicture = value;
      return this;
    }

    /**
     * <code>optional .FriendOnlineStatus online_status = 11;</code>
     * @return whether the onlineStatus field is set
     */
    public boolean hasOnlineStatus() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>optional .FriendOnlineStatus online_status = 11;</code>
     * @return this
     */
    public SimpleInfo clearOnlineStatus() {
      bitField0_ &= ~0x00000020;
      onlineStatus = 0;
      return this;
    }

    /**
     * <code>optional .FriendOnlineStatus online_status = 11;</code>
     * @return the onlineStatus
     */
    public FriendOnlineStatusOuterClass.FriendOnlineStatus getOnlineStatus() {
      return FriendOnlineStatusOuterClass.FriendOnlineStatus.forNumber(onlineStatus);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link SimpleInfo#getOnlineStatus()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getOnlineStatusValue() {
      return onlineStatus;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link FriendOnlineStatusOuterClass.FriendOnlineStatus}. Setting an invalid value
     * can cause {@link SimpleInfo#getOnlineStatus()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public SimpleInfo setOnlineStatusValue(final int value) {
      bitField0_ |= 0x00000020;
      onlineStatus = value;
      return this;
    }

    /**
     * <code>optional .FriendOnlineStatus online_status = 11;</code>
     * @param value the onlineStatus to set
     * @return this
     */
    public SimpleInfo setOnlineStatus(final FriendOnlineStatusOuterClass.FriendOnlineStatus value) {
      bitField0_ |= 0x00000020;
      onlineStatus = value.getNumber();
      return this;
    }

    /**
     * <code>optional .PlatformType platform_type = 14;</code>
     * @return whether the platformType field is set
     */
    public boolean hasPlatformType() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional .PlatformType platform_type = 14;</code>
     * @return this
     */
    public SimpleInfo clearPlatformType() {
      bitField0_ &= ~0x00000040;
      platformType = 0;
      return this;
    }

    /**
     * <code>optional .PlatformType platform_type = 14;</code>
     * @return the platformType
     */
    public PlatformTypeOuterClass.PlatformType getPlatformType() {
      return PlatformTypeOuterClass.PlatformType.forNumber(platformType);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link SimpleInfo#getPlatformType()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getPlatformTypeValue() {
      return platformType;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link PlatformTypeOuterClass.PlatformType}. Setting an invalid value
     * can cause {@link SimpleInfo#getPlatformType()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public SimpleInfo setPlatformTypeValue(final int value) {
      bitField0_ |= 0x00000040;
      platformType = value;
      return this;
    }

    /**
     * <code>optional .PlatformType platform_type = 14;</code>
     * @param value the platformType to set
     * @return this
     */
    public SimpleInfo setPlatformType(final PlatformTypeOuterClass.PlatformType value) {
      bitField0_ |= 0x00000040;
      platformType = value.getNumber();
      return this;
    }

    /**
     * <code>optional bool KCKLEMNIDNK = 4;</code>
     * @return whether the kCKLEMNIDNK field is set
     */
    public boolean hasKCKLEMNIDNK() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>optional bool KCKLEMNIDNK = 4;</code>
     * @return this
     */
    public SimpleInfo clearKCKLEMNIDNK() {
      bitField0_ &= ~0x00000080;
      kCKLEMNIDNK = false;
      return this;
    }

    /**
     * <code>optional bool KCKLEMNIDNK = 4;</code>
     * @return the kCKLEMNIDNK
     */
    public boolean getKCKLEMNIDNK() {
      return kCKLEMNIDNK;
    }

    /**
     * <code>optional bool KCKLEMNIDNK = 4;</code>
     * @param value the kCKLEMNIDNK to set
     * @return this
     */
    public SimpleInfo setKCKLEMNIDNK(final boolean value) {
      bitField0_ |= 0x00000080;
      kCKLEMNIDNK = value;
      return this;
    }

    /**
     * <code>optional .FriendAvatarInfo friend_avatar_info = 12;</code>
     * @return whether the friendAvatarInfo field is set
     */
    public boolean hasFriendAvatarInfo() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <code>optional .FriendAvatarInfo friend_avatar_info = 12;</code>
     * @return this
     */
    public SimpleInfo clearFriendAvatarInfo() {
      bitField0_ &= ~0x00000100;
      friendAvatarInfo.clear();
      return this;
    }

    /**
     * <code>optional .FriendAvatarInfo friend_avatar_info = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFriendAvatarInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public FriendAvatarInfoOuterClass.FriendAvatarInfo getFriendAvatarInfo() {
      return friendAvatarInfo;
    }

    /**
     * <code>optional .FriendAvatarInfo friend_avatar_info = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public FriendAvatarInfoOuterClass.FriendAvatarInfo getMutableFriendAvatarInfo() {
      bitField0_ |= 0x00000100;
      return friendAvatarInfo;
    }

    /**
     * <code>optional .FriendAvatarInfo friend_avatar_info = 12;</code>
     * @param value the friendAvatarInfo to set
     * @return this
     */
    public SimpleInfo setFriendAvatarInfo(final FriendAvatarInfoOuterClass.FriendAvatarInfo value) {
      bitField0_ |= 0x00000100;
      friendAvatarInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string CHFJJPIKGCA = 3;</code>
     * @return whether the cHFJJPIKGCA field is set
     */
    public boolean hasCHFJJPIKGCA() {
      return (bitField0_ & 0x00000200) != 0;
    }

    /**
     * <code>optional string CHFJJPIKGCA = 3;</code>
     * @return this
     */
    public SimpleInfo clearCHFJJPIKGCA() {
      bitField0_ &= ~0x00000200;
      cHFJJPIKGCA.clear();
      return this;
    }

    /**
     * <code>optional string CHFJJPIKGCA = 3;</code>
     * @return the cHFJJPIKGCA
     */
    public String getCHFJJPIKGCA() {
      return cHFJJPIKGCA.getString();
    }

    /**
     * <code>optional string CHFJJPIKGCA = 3;</code>
     * @return internal {@code Utf8String} representation of cHFJJPIKGCA for reading
     */
    public Utf8String getCHFJJPIKGCABytes() {
      return this.cHFJJPIKGCA;
    }

    /**
     * <code>optional string CHFJJPIKGCA = 3;</code>
     * @return internal {@code Utf8String} representation of cHFJJPIKGCA for modifications
     */
    public Utf8String getMutableCHFJJPIKGCABytes() {
      bitField0_ |= 0x00000200;
      return this.cHFJJPIKGCA;
    }

    /**
     * <code>optional string CHFJJPIKGCA = 3;</code>
     * @param value the cHFJJPIKGCA to set
     * @return this
     */
    public SimpleInfo setCHFJJPIKGCA(final CharSequence value) {
      bitField0_ |= 0x00000200;
      cHFJJPIKGCA.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string CHFJJPIKGCA = 3;</code>
     * @param value the cHFJJPIKGCA to set
     * @return this
     */
    public SimpleInfo setCHFJJPIKGCA(final Utf8String value) {
      bitField0_ |= 0x00000200;
      cHFJJPIKGCA.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string BMMMNJEPNKE = 5;</code>
     * @return whether the bMMMNJEPNKE field is set
     */
    public boolean hasBMMMNJEPNKE() {
      return (bitField0_ & 0x00000400) != 0;
    }

    /**
     * <code>optional string BMMMNJEPNKE = 5;</code>
     * @return this
     */
    public SimpleInfo clearBMMMNJEPNKE() {
      bitField0_ &= ~0x00000400;
      bMMMNJEPNKE.clear();
      return this;
    }

    /**
     * <code>optional string BMMMNJEPNKE = 5;</code>
     * @return the bMMMNJEPNKE
     */
    public String getBMMMNJEPNKE() {
      return bMMMNJEPNKE.getString();
    }

    /**
     * <code>optional string BMMMNJEPNKE = 5;</code>
     * @return internal {@code Utf8String} representation of bMMMNJEPNKE for reading
     */
    public Utf8String getBMMMNJEPNKEBytes() {
      return this.bMMMNJEPNKE;
    }

    /**
     * <code>optional string BMMMNJEPNKE = 5;</code>
     * @return internal {@code Utf8String} representation of bMMMNJEPNKE for modifications
     */
    public Utf8String getMutableBMMMNJEPNKEBytes() {
      bitField0_ |= 0x00000400;
      return this.bMMMNJEPNKE;
    }

    /**
     * <code>optional string BMMMNJEPNKE = 5;</code>
     * @param value the bMMMNJEPNKE to set
     * @return this
     */
    public SimpleInfo setBMMMNJEPNKE(final CharSequence value) {
      bitField0_ |= 0x00000400;
      bMMMNJEPNKE.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string BMMMNJEPNKE = 5;</code>
     * @param value the bMMMNJEPNKE to set
     * @return this
     */
    public SimpleInfo setBMMMNJEPNKE(final Utf8String value) {
      bitField0_ |= 0x00000400;
      bMMMNJEPNKE.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string nickname = 6;</code>
     * @return whether the nickname field is set
     */
    public boolean hasNickname() {
      return (bitField0_ & 0x00000800) != 0;
    }

    /**
     * <code>optional string nickname = 6;</code>
     * @return this
     */
    public SimpleInfo clearNickname() {
      bitField0_ &= ~0x00000800;
      nickname.clear();
      return this;
    }

    /**
     * <code>optional string nickname = 6;</code>
     * @return the nickname
     */
    public String getNickname() {
      return nickname.getString();
    }

    /**
     * <code>optional string nickname = 6;</code>
     * @return internal {@code Utf8String} representation of nickname for reading
     */
    public Utf8String getNicknameBytes() {
      return this.nickname;
    }

    /**
     * <code>optional string nickname = 6;</code>
     * @return internal {@code Utf8String} representation of nickname for modifications
     */
    public Utf8String getMutableNicknameBytes() {
      bitField0_ |= 0x00000800;
      return this.nickname;
    }

    /**
     * <code>optional string nickname = 6;</code>
     * @param value the nickname to set
     * @return this
     */
    public SimpleInfo setNickname(final CharSequence value) {
      bitField0_ |= 0x00000800;
      nickname.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string nickname = 6;</code>
     * @param value the nickname to set
     * @return this
     */
    public SimpleInfo setNickname(final Utf8String value) {
      bitField0_ |= 0x00000800;
      nickname.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string signature = 10;</code>
     * @return whether the signature field is set
     */
    public boolean hasSignature() {
      return (bitField0_ & 0x00001000) != 0;
    }

    /**
     * <code>optional string signature = 10;</code>
     * @return this
     */
    public SimpleInfo clearSignature() {
      bitField0_ &= ~0x00001000;
      signature.clear();
      return this;
    }

    /**
     * <code>optional string signature = 10;</code>
     * @return the signature
     */
    public String getSignature() {
      return signature.getString();
    }

    /**
     * <code>optional string signature = 10;</code>
     * @return internal {@code Utf8String} representation of signature for reading
     */
    public Utf8String getSignatureBytes() {
      return this.signature;
    }

    /**
     * <code>optional string signature = 10;</code>
     * @return internal {@code Utf8String} representation of signature for modifications
     */
    public Utf8String getMutableSignatureBytes() {
      bitField0_ |= 0x00001000;
      return this.signature;
    }

    /**
     * <code>optional string signature = 10;</code>
     * @param value the signature to set
     * @return this
     */
    public SimpleInfo setSignature(final CharSequence value) {
      bitField0_ |= 0x00001000;
      signature.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string signature = 10;</code>
     * @param value the signature to set
     * @return this
     */
    public SimpleInfo setSignature(final Utf8String value) {
      bitField0_ |= 0x00001000;
      signature.copyFrom(value);
      return this;
    }

    @Override
    public SimpleInfo copyFrom(final SimpleInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        lastActiveTime = other.lastActiveTime;
        level = other.level;
        jCKIEMDALOB = other.jCKIEMDALOB;
        uid = other.uid;
        profilePicture = other.profilePicture;
        onlineStatus = other.onlineStatus;
        platformType = other.platformType;
        kCKLEMNIDNK = other.kCKLEMNIDNK;
        friendAvatarInfo.copyFrom(other.friendAvatarInfo);
        cHFJJPIKGCA.copyFrom(other.cHFJJPIKGCA);
        bMMMNJEPNKE.copyFrom(other.bMMMNJEPNKE);
        nickname.copyFrom(other.nickname);
        signature.copyFrom(other.signature);
      }
      return this;
    }

    @Override
    public SimpleInfo mergeFrom(final SimpleInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasLastActiveTime()) {
        setLastActiveTime(other.lastActiveTime);
      }
      if (other.hasLevel()) {
        setLevel(other.level);
      }
      if (other.hasJCKIEMDALOB()) {
        setJCKIEMDALOB(other.jCKIEMDALOB);
      }
      if (other.hasUid()) {
        setUid(other.uid);
      }
      if (other.hasProfilePicture()) {
        setProfilePicture(other.profilePicture);
      }
      if (other.hasOnlineStatus()) {
        setOnlineStatusValue(other.onlineStatus);
      }
      if (other.hasPlatformType()) {
        setPlatformTypeValue(other.platformType);
      }
      if (other.hasKCKLEMNIDNK()) {
        setKCKLEMNIDNK(other.kCKLEMNIDNK);
      }
      if (other.hasFriendAvatarInfo()) {
        getMutableFriendAvatarInfo().mergeFrom(other.friendAvatarInfo);
      }
      if (other.hasCHFJJPIKGCA()) {
        getMutableCHFJJPIKGCABytes().copyFrom(other.cHFJJPIKGCA);
      }
      if (other.hasBMMMNJEPNKE()) {
        getMutableBMMMNJEPNKEBytes().copyFrom(other.bMMMNJEPNKE);
      }
      if (other.hasNickname()) {
        getMutableNicknameBytes().copyFrom(other.nickname);
      }
      if (other.hasSignature()) {
        getMutableSignatureBytes().copyFrom(other.signature);
      }
      return this;
    }

    @Override
    public SimpleInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      lastActiveTime = 0L;
      level = 0;
      jCKIEMDALOB = 0;
      uid = 0;
      profilePicture = 0;
      onlineStatus = 0;
      platformType = 0;
      kCKLEMNIDNK = false;
      friendAvatarInfo.clear();
      cHFJJPIKGCA.clear();
      bMMMNJEPNKE.clear();
      nickname.clear();
      signature.clear();
      return this;
    }

    @Override
    public SimpleInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      friendAvatarInfo.clearQuick();
      cHFJJPIKGCA.clear();
      bMMMNJEPNKE.clear();
      nickname.clear();
      signature.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SimpleInfo)) {
        return false;
      }
      SimpleInfo other = (SimpleInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasLastActiveTime() || lastActiveTime == other.lastActiveTime)
        && (!hasLevel() || level == other.level)
        && (!hasJCKIEMDALOB() || jCKIEMDALOB == other.jCKIEMDALOB)
        && (!hasUid() || uid == other.uid)
        && (!hasProfilePicture() || profilePicture == other.profilePicture)
        && (!hasOnlineStatus() || onlineStatus == other.onlineStatus)
        && (!hasPlatformType() || platformType == other.platformType)
        && (!hasKCKLEMNIDNK() || kCKLEMNIDNK == other.kCKLEMNIDNK)
        && (!hasFriendAvatarInfo() || friendAvatarInfo.equals(other.friendAvatarInfo))
        && (!hasCHFJJPIKGCA() || cHFJJPIKGCA.equals(other.cHFJJPIKGCA))
        && (!hasBMMMNJEPNKE() || bMMMNJEPNKE.equals(other.bMMMNJEPNKE))
        && (!hasNickname() || nickname.equals(other.nickname))
        && (!hasSignature() || signature.equals(other.signature));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 64);
        output.writeInt64NoTag(lastActiveTime);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(jCKIEMDALOB);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(uid);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(profilePicture);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawByte((byte) 88);
        output.writeEnumNoTag(onlineStatus);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 112);
        output.writeEnumNoTag(platformType);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawByte((byte) 32);
        output.writeBoolNoTag(kCKLEMNIDNK);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawByte((byte) 98);
        output.writeMessageNoTag(friendAvatarInfo);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeRawByte((byte) 26);
        output.writeStringNoTag(cHFJJPIKGCA);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeRawByte((byte) 42);
        output.writeStringNoTag(bMMMNJEPNKE);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeRawByte((byte) 50);
        output.writeStringNoTag(nickname);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeRawByte((byte) 82);
        output.writeStringNoTag(signature);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeInt64SizeNoTag(lastActiveTime);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(jCKIEMDALOB);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(uid);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(profilePicture);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(onlineStatus);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(platformType);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(friendAvatarInfo);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(cHFJJPIKGCA);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(bMMMNJEPNKE);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(nickname);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(signature);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SimpleInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 64: {
            // lastActiveTime
            lastActiveTime = input.readInt64();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 8) {
              break;
            }
          }
          case 8: {
            // level
            level = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // jCKIEMDALOB
            jCKIEMDALOB = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // uid
            uid = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // profilePicture
            profilePicture = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // onlineStatus
            final int value = input.readInt32();
            if (FriendOnlineStatusOuterClass.FriendOnlineStatus.forNumber(value) != null) {
              onlineStatus = value;
              bitField0_ |= 0x00000020;
            }
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // platformType
            final int value = input.readInt32();
            if (PlatformTypeOuterClass.PlatformType.forNumber(value) != null) {
              platformType = value;
              bitField0_ |= 0x00000040;
            }
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // kCKLEMNIDNK
            kCKLEMNIDNK = input.readBool();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // friendAvatarInfo
            input.readMessage(friendAvatarInfo);
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // cHFJJPIKGCA
            input.readString(cHFJJPIKGCA);
            bitField0_ |= 0x00000200;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // bMMMNJEPNKE
            input.readString(bMMMNJEPNKE);
            bitField0_ |= 0x00000400;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // nickname
            input.readString(nickname);
            bitField0_ |= 0x00000800;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // signature
            input.readString(signature);
            bitField0_ |= 0x00001000;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeInt64(FieldNames.lastActiveTime, lastActiveTime);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.level, level);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.jCKIEMDALOB, jCKIEMDALOB);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.uid, uid);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.profilePicture, profilePicture);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeEnum(FieldNames.onlineStatus, onlineStatus, FriendOnlineStatusOuterClass.FriendOnlineStatus.converter());
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeEnum(FieldNames.platformType, platformType, PlatformTypeOuterClass.PlatformType.converter());
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeBool(FieldNames.kCKLEMNIDNK, kCKLEMNIDNK);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeMessage(FieldNames.friendAvatarInfo, friendAvatarInfo);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeString(FieldNames.cHFJJPIKGCA, cHFJJPIKGCA);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeString(FieldNames.bMMMNJEPNKE, bMMMNJEPNKE);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeString(FieldNames.nickname, nickname);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeString(FieldNames.signature, signature);
      }
      output.endObject();
    }

    @Override
    public SimpleInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -2041905623:
          case 1542438973: {
            if (input.isAtField(FieldNames.lastActiveTime)) {
              if (!input.trySkipNullValue()) {
                lastActiveTime = input.readInt64();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 102865796: {
            if (input.isAtField(FieldNames.level)) {
              if (!input.trySkipNullValue()) {
                level = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -773412445: {
            if (input.isAtField(FieldNames.jCKIEMDALOB)) {
              if (!input.trySkipNullValue()) {
                jCKIEMDALOB = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 115792: {
            if (input.isAtField(FieldNames.uid)) {
              if (!input.trySkipNullValue()) {
                uid = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1406866667:
          case 1782764648: {
            if (input.isAtField(FieldNames.profilePicture)) {
              if (!input.trySkipNullValue()) {
                profilePicture = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1159866405:
          case -650386594: {
            if (input.isAtField(FieldNames.onlineStatus)) {
              if (!input.trySkipNullValue()) {
                final FriendOnlineStatusOuterClass.FriendOnlineStatus value = input.readEnum(FriendOnlineStatusOuterClass.FriendOnlineStatus.converter());
                if (value != null) {
                  onlineStatus = value.getNumber();
                  bitField0_ |= 0x00000020;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 155581005:
          case 538062726: {
            if (input.isAtField(FieldNames.platformType)) {
              if (!input.trySkipNullValue()) {
                final PlatformTypeOuterClass.PlatformType value = input.readEnum(PlatformTypeOuterClass.PlatformType.converter());
                if (value != null) {
                  platformType = value.getNumber();
                  bitField0_ |= 0x00000040;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1627434267: {
            if (input.isAtField(FieldNames.kCKLEMNIDNK)) {
              if (!input.trySkipNullValue()) {
                kCKLEMNIDNK = input.readBool();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2012020453:
          case 1631238067: {
            if (input.isAtField(FieldNames.friendAvatarInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(friendAvatarInfo);
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 361274612: {
            if (input.isAtField(FieldNames.cHFJJPIKGCA)) {
              if (!input.trySkipNullValue()) {
                input.readString(cHFJJPIKGCA);
                bitField0_ |= 0x00000200;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1421577174: {
            if (input.isAtField(FieldNames.bMMMNJEPNKE)) {
              if (!input.trySkipNullValue()) {
                input.readString(bMMMNJEPNKE);
                bitField0_ |= 0x00000400;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 70690926: {
            if (input.isAtField(FieldNames.nickname)) {
              if (!input.trySkipNullValue()) {
                input.readString(nickname);
                bitField0_ |= 0x00000800;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1073584312: {
            if (input.isAtField(FieldNames.signature)) {
              if (!input.trySkipNullValue()) {
                input.readString(signature);
                bitField0_ |= 0x00001000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SimpleInfo clone() {
      return new SimpleInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SimpleInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SimpleInfo(), data).checkInitialized();
    }

    public static SimpleInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SimpleInfo(), input).checkInitialized();
    }

    public static SimpleInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SimpleInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating SimpleInfo messages
     */
    public static MessageFactory<SimpleInfo> getFactory() {
      return SimpleInfoFactory.INSTANCE;
    }

    private enum SimpleInfoFactory implements MessageFactory<SimpleInfo> {
      INSTANCE;

      @Override
      public SimpleInfo create() {
        return SimpleInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName lastActiveTime = FieldName.forField("lastActiveTime", "last_active_time");

      static final FieldName level = FieldName.forField("level");

      static final FieldName jCKIEMDALOB = FieldName.forField("JCKIEMDALOB");

      static final FieldName uid = FieldName.forField("uid");

      static final FieldName profilePicture = FieldName.forField("profilePicture", "profile_picture");

      static final FieldName onlineStatus = FieldName.forField("onlineStatus", "online_status");

      static final FieldName platformType = FieldName.forField("platformType", "platform_type");

      static final FieldName kCKLEMNIDNK = FieldName.forField("KCKLEMNIDNK");

      static final FieldName friendAvatarInfo = FieldName.forField("friendAvatarInfo", "friend_avatar_info");

      static final FieldName cHFJJPIKGCA = FieldName.forField("CHFJJPIKGCA");

      static final FieldName bMMMNJEPNKE = FieldName.forField("BMMMNJEPNKE");

      static final FieldName nickname = FieldName.forField("nickname");

      static final FieldName signature = FieldName.forField("signature");
    }
  }
}
