// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;

public final class RogueAeonInfoOuterClass {
  /**
   * Protobuf type {@code RogueAeonInfo}
   */
  public static final class RogueAeonInfo extends ProtoMessage<RogueAeonInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 unlock_aeon_enhance_num = 1;</code>
     */
    private int unlockAeonEnhanceNum;

    /**
     * <code>optional uint32 unlocked_aeon_num = 4;</code>
     */
    private int unlockedAeonNum;

    /**
     * <code>optional uint32 selected_aeon_id = 8;</code>
     */
    private int selectedAeonId;

    /**
     * <code>optional bool AFPFIHKLELP = 9;</code>
     */
    private boolean aFPFIHKLELP;

    /**
     * <code>repeated uint32 aeon_id_list = 5;</code>
     */
    private final RepeatedInt aeonIdList = RepeatedInt.newEmptyInstance();

    private RogueAeonInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueAeonInfo}
     */
    public static RogueAeonInfo newInstance() {
      return new RogueAeonInfo();
    }

    /**
     * <code>optional uint32 unlock_aeon_enhance_num = 1;</code>
     * @return whether the unlockAeonEnhanceNum field is set
     */
    public boolean hasUnlockAeonEnhanceNum() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 unlock_aeon_enhance_num = 1;</code>
     * @return this
     */
    public RogueAeonInfo clearUnlockAeonEnhanceNum() {
      bitField0_ &= ~0x00000001;
      unlockAeonEnhanceNum = 0;
      return this;
    }

    /**
     * <code>optional uint32 unlock_aeon_enhance_num = 1;</code>
     * @return the unlockAeonEnhanceNum
     */
    public int getUnlockAeonEnhanceNum() {
      return unlockAeonEnhanceNum;
    }

    /**
     * <code>optional uint32 unlock_aeon_enhance_num = 1;</code>
     * @param value the unlockAeonEnhanceNum to set
     * @return this
     */
    public RogueAeonInfo setUnlockAeonEnhanceNum(final int value) {
      bitField0_ |= 0x00000001;
      unlockAeonEnhanceNum = value;
      return this;
    }

    /**
     * <code>optional uint32 unlocked_aeon_num = 4;</code>
     * @return whether the unlockedAeonNum field is set
     */
    public boolean hasUnlockedAeonNum() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 unlocked_aeon_num = 4;</code>
     * @return this
     */
    public RogueAeonInfo clearUnlockedAeonNum() {
      bitField0_ &= ~0x00000002;
      unlockedAeonNum = 0;
      return this;
    }

    /**
     * <code>optional uint32 unlocked_aeon_num = 4;</code>
     * @return the unlockedAeonNum
     */
    public int getUnlockedAeonNum() {
      return unlockedAeonNum;
    }

    /**
     * <code>optional uint32 unlocked_aeon_num = 4;</code>
     * @param value the unlockedAeonNum to set
     * @return this
     */
    public RogueAeonInfo setUnlockedAeonNum(final int value) {
      bitField0_ |= 0x00000002;
      unlockedAeonNum = value;
      return this;
    }

    /**
     * <code>optional uint32 selected_aeon_id = 8;</code>
     * @return whether the selectedAeonId field is set
     */
    public boolean hasSelectedAeonId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 selected_aeon_id = 8;</code>
     * @return this
     */
    public RogueAeonInfo clearSelectedAeonId() {
      bitField0_ &= ~0x00000004;
      selectedAeonId = 0;
      return this;
    }

    /**
     * <code>optional uint32 selected_aeon_id = 8;</code>
     * @return the selectedAeonId
     */
    public int getSelectedAeonId() {
      return selectedAeonId;
    }

    /**
     * <code>optional uint32 selected_aeon_id = 8;</code>
     * @param value the selectedAeonId to set
     * @return this
     */
    public RogueAeonInfo setSelectedAeonId(final int value) {
      bitField0_ |= 0x00000004;
      selectedAeonId = value;
      return this;
    }

    /**
     * <code>optional bool AFPFIHKLELP = 9;</code>
     * @return whether the aFPFIHKLELP field is set
     */
    public boolean hasAFPFIHKLELP() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional bool AFPFIHKLELP = 9;</code>
     * @return this
     */
    public RogueAeonInfo clearAFPFIHKLELP() {
      bitField0_ &= ~0x00000008;
      aFPFIHKLELP = false;
      return this;
    }

    /**
     * <code>optional bool AFPFIHKLELP = 9;</code>
     * @return the aFPFIHKLELP
     */
    public boolean getAFPFIHKLELP() {
      return aFPFIHKLELP;
    }

    /**
     * <code>optional bool AFPFIHKLELP = 9;</code>
     * @param value the aFPFIHKLELP to set
     * @return this
     */
    public RogueAeonInfo setAFPFIHKLELP(final boolean value) {
      bitField0_ |= 0x00000008;
      aFPFIHKLELP = value;
      return this;
    }

    /**
     * <code>repeated uint32 aeon_id_list = 5;</code>
     * @return whether the aeonIdList field is set
     */
    public boolean hasAeonIdList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated uint32 aeon_id_list = 5;</code>
     * @return this
     */
    public RogueAeonInfo clearAeonIdList() {
      bitField0_ &= ~0x00000010;
      aeonIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 aeon_id_list = 5;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAeonIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getAeonIdList() {
      return aeonIdList;
    }

    /**
     * <code>repeated uint32 aeon_id_list = 5;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableAeonIdList() {
      bitField0_ |= 0x00000010;
      return aeonIdList;
    }

    /**
     * <code>repeated uint32 aeon_id_list = 5;</code>
     * @param value the aeonIdList to add
     * @return this
     */
    public RogueAeonInfo addAeonIdList(final int value) {
      bitField0_ |= 0x00000010;
      aeonIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 aeon_id_list = 5;</code>
     * @param values the aeonIdList to add
     * @return this
     */
    public RogueAeonInfo addAllAeonIdList(final int... values) {
      bitField0_ |= 0x00000010;
      aeonIdList.addAll(values);
      return this;
    }

    @Override
    public RogueAeonInfo copyFrom(final RogueAeonInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        unlockAeonEnhanceNum = other.unlockAeonEnhanceNum;
        unlockedAeonNum = other.unlockedAeonNum;
        selectedAeonId = other.selectedAeonId;
        aFPFIHKLELP = other.aFPFIHKLELP;
        aeonIdList.copyFrom(other.aeonIdList);
      }
      return this;
    }

    @Override
    public RogueAeonInfo mergeFrom(final RogueAeonInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasUnlockAeonEnhanceNum()) {
        setUnlockAeonEnhanceNum(other.unlockAeonEnhanceNum);
      }
      if (other.hasUnlockedAeonNum()) {
        setUnlockedAeonNum(other.unlockedAeonNum);
      }
      if (other.hasSelectedAeonId()) {
        setSelectedAeonId(other.selectedAeonId);
      }
      if (other.hasAFPFIHKLELP()) {
        setAFPFIHKLELP(other.aFPFIHKLELP);
      }
      if (other.hasAeonIdList()) {
        getMutableAeonIdList().addAll(other.aeonIdList);
      }
      return this;
    }

    @Override
    public RogueAeonInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      unlockAeonEnhanceNum = 0;
      unlockedAeonNum = 0;
      selectedAeonId = 0;
      aFPFIHKLELP = false;
      aeonIdList.clear();
      return this;
    }

    @Override
    public RogueAeonInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aeonIdList.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueAeonInfo)) {
        return false;
      }
      RogueAeonInfo other = (RogueAeonInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasUnlockAeonEnhanceNum() || unlockAeonEnhanceNum == other.unlockAeonEnhanceNum)
        && (!hasUnlockedAeonNum() || unlockedAeonNum == other.unlockedAeonNum)
        && (!hasSelectedAeonId() || selectedAeonId == other.selectedAeonId)
        && (!hasAFPFIHKLELP() || aFPFIHKLELP == other.aFPFIHKLELP)
        && (!hasAeonIdList() || aeonIdList.equals(other.aeonIdList));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(unlockAeonEnhanceNum);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(unlockedAeonNum);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(selectedAeonId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 72);
        output.writeBoolNoTag(aFPFIHKLELP);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < aeonIdList.length(); i++) {
          output.writeRawByte((byte) 40);
          output.writeUInt32NoTag(aeonIdList.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(unlockAeonEnhanceNum);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(unlockedAeonNum);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(selectedAeonId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * aeonIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(aeonIdList);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueAeonInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // unlockAeonEnhanceNum
            unlockAeonEnhanceNum = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // unlockedAeonNum
            unlockedAeonNum = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // selectedAeonId
            selectedAeonId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // aFPFIHKLELP
            aFPFIHKLELP = input.readBool();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 42) {
              break;
            }
          }
          case 42: {
            // aeonIdList [packed=true]
            input.readPackedUInt32(aeonIdList, tag);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 40: {
            // aeonIdList [packed=false]
            tag = input.readRepeatedUInt32(aeonIdList, tag);
            bitField0_ |= 0x00000010;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.unlockAeonEnhanceNum, unlockAeonEnhanceNum);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.unlockedAeonNum, unlockedAeonNum);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.selectedAeonId, selectedAeonId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeBool(FieldNames.aFPFIHKLELP, aFPFIHKLELP);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedUInt32(FieldNames.aeonIdList, aeonIdList);
      }
      output.endObject();
    }

    @Override
    public RogueAeonInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1040991167:
          case 7773396: {
            if (input.isAtField(FieldNames.unlockAeonEnhanceNum)) {
              if (!input.trySkipNullValue()) {
                unlockAeonEnhanceNum = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -149403872:
          case 1158862886: {
            if (input.isAtField(FieldNames.unlockedAeonNum)) {
              if (!input.trySkipNullValue()) {
                unlockedAeonNum = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1331475449:
          case 853040179: {
            if (input.isAtField(FieldNames.selectedAeonId)) {
              if (!input.trySkipNullValue()) {
                selectedAeonId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -337406834: {
            if (input.isAtField(FieldNames.aFPFIHKLELP)) {
              if (!input.trySkipNullValue()) {
                aFPFIHKLELP = input.readBool();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1452976956:
          case 953805318: {
            if (input.isAtField(FieldNames.aeonIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(aeonIdList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueAeonInfo clone() {
      return new RogueAeonInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueAeonInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueAeonInfo(), data).checkInitialized();
    }

    public static RogueAeonInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueAeonInfo(), input).checkInitialized();
    }

    public static RogueAeonInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueAeonInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueAeonInfo messages
     */
    public static MessageFactory<RogueAeonInfo> getFactory() {
      return RogueAeonInfoFactory.INSTANCE;
    }

    private enum RogueAeonInfoFactory implements MessageFactory<RogueAeonInfo> {
      INSTANCE;

      @Override
      public RogueAeonInfo create() {
        return RogueAeonInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName unlockAeonEnhanceNum = FieldName.forField("unlockAeonEnhanceNum", "unlock_aeon_enhance_num");

      static final FieldName unlockedAeonNum = FieldName.forField("unlockedAeonNum", "unlocked_aeon_num");

      static final FieldName selectedAeonId = FieldName.forField("selectedAeonId", "selected_aeon_id");

      static final FieldName aFPFIHKLELP = FieldName.forField("AFPFIHKLELP");

      static final FieldName aeonIdList = FieldName.forField("aeonIdList", "aeon_id_list");
    }
  }
}
