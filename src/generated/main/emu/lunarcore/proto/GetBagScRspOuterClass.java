// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class GetBagScRspOuterClass {
  /**
   * Protobuf type {@code GetBagScRsp}
   */
  public static final class GetBagScRsp extends ProtoMessage<GetBagScRsp> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 retcode = 3;</code>
     */
    private int retcode;

    /**
     * <code>optional uint32 AGDPOHEPDDK = 14;</code>
     */
    private int aGDPOHEPDDK;

    /**
     * <code>repeated uint32 FCCFAPHDPIB = 8;</code>
     */
    private final RepeatedInt fCCFAPHDPIB = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .Material material_list = 1;</code>
     */
    private final RepeatedMessage<MaterialOuterClass.Material> materialList = RepeatedMessage.newEmptyInstance(MaterialOuterClass.Material.getFactory());

    /**
     * <pre>
     * repeated JAKOAONFNGN KPBMGJKOKDA = 11;
     * </pre>
     *
     * <code>repeated .Equipment equipment_list = 2;</code>
     */
    private final RepeatedMessage<EquipmentOuterClass.Equipment> equipmentList = RepeatedMessage.newEmptyInstance(EquipmentOuterClass.Equipment.getFactory());

    /**
     * <pre>
     * repeated JAKOAONFNGN LKGOMEBOJAF = 6;
     * </pre>
     *
     * <code>repeated .Relic relic_list = 7;</code>
     */
    private final RepeatedMessage<RelicOuterClass.Relic> relicList = RepeatedMessage.newEmptyInstance(RelicOuterClass.Relic.getFactory());

    /**
     * <code>repeated .WaitDelResource wait_del_resource_list = 9;</code>
     */
    private final RepeatedMessage<WaitDelResourceOuterClass.WaitDelResource> waitDelResourceList = RepeatedMessage.newEmptyInstance(WaitDelResourceOuterClass.WaitDelResource.getFactory());

    /**
     * <code>repeated .Material EANGCGPDMBM = 13;</code>
     */
    private final RepeatedMessage<MaterialOuterClass.Material> eANGCGPDMBM = RepeatedMessage.newEmptyInstance(MaterialOuterClass.Material.getFactory());

    private GetBagScRsp() {
    }

    /**
     * @return a new empty instance of {@code GetBagScRsp}
     */
    public static GetBagScRsp newInstance() {
      return new GetBagScRsp();
    }

    /**
     * <code>optional uint32 retcode = 3;</code>
     * @return whether the retcode field is set
     */
    public boolean hasRetcode() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 retcode = 3;</code>
     * @return this
     */
    public GetBagScRsp clearRetcode() {
      bitField0_ &= ~0x00000001;
      retcode = 0;
      return this;
    }

    /**
     * <code>optional uint32 retcode = 3;</code>
     * @return the retcode
     */
    public int getRetcode() {
      return retcode;
    }

    /**
     * <code>optional uint32 retcode = 3;</code>
     * @param value the retcode to set
     * @return this
     */
    public GetBagScRsp setRetcode(final int value) {
      bitField0_ |= 0x00000001;
      retcode = value;
      return this;
    }

    /**
     * <code>optional uint32 AGDPOHEPDDK = 14;</code>
     * @return whether the aGDPOHEPDDK field is set
     */
    public boolean hasAGDPOHEPDDK() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 AGDPOHEPDDK = 14;</code>
     * @return this
     */
    public GetBagScRsp clearAGDPOHEPDDK() {
      bitField0_ &= ~0x00000002;
      aGDPOHEPDDK = 0;
      return this;
    }

    /**
     * <code>optional uint32 AGDPOHEPDDK = 14;</code>
     * @return the aGDPOHEPDDK
     */
    public int getAGDPOHEPDDK() {
      return aGDPOHEPDDK;
    }

    /**
     * <code>optional uint32 AGDPOHEPDDK = 14;</code>
     * @param value the aGDPOHEPDDK to set
     * @return this
     */
    public GetBagScRsp setAGDPOHEPDDK(final int value) {
      bitField0_ |= 0x00000002;
      aGDPOHEPDDK = value;
      return this;
    }

    /**
     * <code>repeated uint32 FCCFAPHDPIB = 8;</code>
     * @return whether the fCCFAPHDPIB field is set
     */
    public boolean hasFCCFAPHDPIB() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>repeated uint32 FCCFAPHDPIB = 8;</code>
     * @return this
     */
    public GetBagScRsp clearFCCFAPHDPIB() {
      bitField0_ &= ~0x00000004;
      fCCFAPHDPIB.clear();
      return this;
    }

    /**
     * <code>repeated uint32 FCCFAPHDPIB = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableFCCFAPHDPIB()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getFCCFAPHDPIB() {
      return fCCFAPHDPIB;
    }

    /**
     * <code>repeated uint32 FCCFAPHDPIB = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableFCCFAPHDPIB() {
      bitField0_ |= 0x00000004;
      return fCCFAPHDPIB;
    }

    /**
     * <code>repeated uint32 FCCFAPHDPIB = 8;</code>
     * @param value the fCCFAPHDPIB to add
     * @return this
     */
    public GetBagScRsp addFCCFAPHDPIB(final int value) {
      bitField0_ |= 0x00000004;
      fCCFAPHDPIB.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 FCCFAPHDPIB = 8;</code>
     * @param values the fCCFAPHDPIB to add
     * @return this
     */
    public GetBagScRsp addAllFCCFAPHDPIB(final int... values) {
      bitField0_ |= 0x00000004;
      fCCFAPHDPIB.addAll(values);
      return this;
    }

    /**
     * <code>repeated .Material material_list = 1;</code>
     * @return whether the materialList field is set
     */
    public boolean hasMaterialList() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated .Material material_list = 1;</code>
     * @return this
     */
    public GetBagScRsp clearMaterialList() {
      bitField0_ &= ~0x00000008;
      materialList.clear();
      return this;
    }

    /**
     * <code>repeated .Material material_list = 1;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableMaterialList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MaterialOuterClass.Material> getMaterialList() {
      return materialList;
    }

    /**
     * <code>repeated .Material material_list = 1;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MaterialOuterClass.Material> getMutableMaterialList() {
      bitField0_ |= 0x00000008;
      return materialList;
    }

    /**
     * <code>repeated .Material material_list = 1;</code>
     * @param value the materialList to add
     * @return this
     */
    public GetBagScRsp addMaterialList(final MaterialOuterClass.Material value) {
      bitField0_ |= 0x00000008;
      materialList.add(value);
      return this;
    }

    /**
     * <code>repeated .Material material_list = 1;</code>
     * @param values the materialList to add
     * @return this
     */
    public GetBagScRsp addAllMaterialList(final MaterialOuterClass.Material... values) {
      bitField0_ |= 0x00000008;
      materialList.addAll(values);
      return this;
    }

    /**
     * <pre>
     * repeated JAKOAONFNGN KPBMGJKOKDA = 11;
     * </pre>
     *
     * <code>repeated .Equipment equipment_list = 2;</code>
     * @return whether the equipmentList field is set
     */
    public boolean hasEquipmentList() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <pre>
     * repeated JAKOAONFNGN KPBMGJKOKDA = 11;
     * </pre>
     *
     * <code>repeated .Equipment equipment_list = 2;</code>
     * @return this
     */
    public GetBagScRsp clearEquipmentList() {
      bitField0_ &= ~0x00000010;
      equipmentList.clear();
      return this;
    }

    /**
     * <pre>
     * repeated JAKOAONFNGN KPBMGJKOKDA = 11;
     * </pre>
     *
     * <code>repeated .Equipment equipment_list = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEquipmentList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<EquipmentOuterClass.Equipment> getEquipmentList() {
      return equipmentList;
    }

    /**
     * <pre>
     * repeated JAKOAONFNGN KPBMGJKOKDA = 11;
     * </pre>
     *
     * <code>repeated .Equipment equipment_list = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<EquipmentOuterClass.Equipment> getMutableEquipmentList() {
      bitField0_ |= 0x00000010;
      return equipmentList;
    }

    /**
     * <pre>
     * repeated JAKOAONFNGN KPBMGJKOKDA = 11;
     * </pre>
     *
     * <code>repeated .Equipment equipment_list = 2;</code>
     * @param value the equipmentList to add
     * @return this
     */
    public GetBagScRsp addEquipmentList(final EquipmentOuterClass.Equipment value) {
      bitField0_ |= 0x00000010;
      equipmentList.add(value);
      return this;
    }

    /**
     * <pre>
     * repeated JAKOAONFNGN KPBMGJKOKDA = 11;
     * </pre>
     *
     * <code>repeated .Equipment equipment_list = 2;</code>
     * @param values the equipmentList to add
     * @return this
     */
    public GetBagScRsp addAllEquipmentList(final EquipmentOuterClass.Equipment... values) {
      bitField0_ |= 0x00000010;
      equipmentList.addAll(values);
      return this;
    }

    /**
     * <pre>
     * repeated JAKOAONFNGN LKGOMEBOJAF = 6;
     * </pre>
     *
     * <code>repeated .Relic relic_list = 7;</code>
     * @return whether the relicList field is set
     */
    public boolean hasRelicList() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <pre>
     * repeated JAKOAONFNGN LKGOMEBOJAF = 6;
     * </pre>
     *
     * <code>repeated .Relic relic_list = 7;</code>
     * @return this
     */
    public GetBagScRsp clearRelicList() {
      bitField0_ &= ~0x00000020;
      relicList.clear();
      return this;
    }

    /**
     * <pre>
     * repeated JAKOAONFNGN LKGOMEBOJAF = 6;
     * </pre>
     *
     * <code>repeated .Relic relic_list = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRelicList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RelicOuterClass.Relic> getRelicList() {
      return relicList;
    }

    /**
     * <pre>
     * repeated JAKOAONFNGN LKGOMEBOJAF = 6;
     * </pre>
     *
     * <code>repeated .Relic relic_list = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RelicOuterClass.Relic> getMutableRelicList() {
      bitField0_ |= 0x00000020;
      return relicList;
    }

    /**
     * <pre>
     * repeated JAKOAONFNGN LKGOMEBOJAF = 6;
     * </pre>
     *
     * <code>repeated .Relic relic_list = 7;</code>
     * @param value the relicList to add
     * @return this
     */
    public GetBagScRsp addRelicList(final RelicOuterClass.Relic value) {
      bitField0_ |= 0x00000020;
      relicList.add(value);
      return this;
    }

    /**
     * <pre>
     * repeated JAKOAONFNGN LKGOMEBOJAF = 6;
     * </pre>
     *
     * <code>repeated .Relic relic_list = 7;</code>
     * @param values the relicList to add
     * @return this
     */
    public GetBagScRsp addAllRelicList(final RelicOuterClass.Relic... values) {
      bitField0_ |= 0x00000020;
      relicList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .WaitDelResource wait_del_resource_list = 9;</code>
     * @return whether the waitDelResourceList field is set
     */
    public boolean hasWaitDelResourceList() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>repeated .WaitDelResource wait_del_resource_list = 9;</code>
     * @return this
     */
    public GetBagScRsp clearWaitDelResourceList() {
      bitField0_ &= ~0x00000040;
      waitDelResourceList.clear();
      return this;
    }

    /**
     * <code>repeated .WaitDelResource wait_del_resource_list = 9;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableWaitDelResourceList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<WaitDelResourceOuterClass.WaitDelResource> getWaitDelResourceList() {
      return waitDelResourceList;
    }

    /**
     * <code>repeated .WaitDelResource wait_del_resource_list = 9;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<WaitDelResourceOuterClass.WaitDelResource> getMutableWaitDelResourceList(
        ) {
      bitField0_ |= 0x00000040;
      return waitDelResourceList;
    }

    /**
     * <code>repeated .WaitDelResource wait_del_resource_list = 9;</code>
     * @param value the waitDelResourceList to add
     * @return this
     */
    public GetBagScRsp addWaitDelResourceList(
        final WaitDelResourceOuterClass.WaitDelResource value) {
      bitField0_ |= 0x00000040;
      waitDelResourceList.add(value);
      return this;
    }

    /**
     * <code>repeated .WaitDelResource wait_del_resource_list = 9;</code>
     * @param values the waitDelResourceList to add
     * @return this
     */
    public GetBagScRsp addAllWaitDelResourceList(
        final WaitDelResourceOuterClass.WaitDelResource... values) {
      bitField0_ |= 0x00000040;
      waitDelResourceList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .Material EANGCGPDMBM = 13;</code>
     * @return whether the eANGCGPDMBM field is set
     */
    public boolean hasEANGCGPDMBM() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>repeated .Material EANGCGPDMBM = 13;</code>
     * @return this
     */
    public GetBagScRsp clearEANGCGPDMBM() {
      bitField0_ &= ~0x00000080;
      eANGCGPDMBM.clear();
      return this;
    }

    /**
     * <code>repeated .Material EANGCGPDMBM = 13;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableEANGCGPDMBM()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<MaterialOuterClass.Material> getEANGCGPDMBM() {
      return eANGCGPDMBM;
    }

    /**
     * <code>repeated .Material EANGCGPDMBM = 13;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<MaterialOuterClass.Material> getMutableEANGCGPDMBM() {
      bitField0_ |= 0x00000080;
      return eANGCGPDMBM;
    }

    /**
     * <code>repeated .Material EANGCGPDMBM = 13;</code>
     * @param value the eANGCGPDMBM to add
     * @return this
     */
    public GetBagScRsp addEANGCGPDMBM(final MaterialOuterClass.Material value) {
      bitField0_ |= 0x00000080;
      eANGCGPDMBM.add(value);
      return this;
    }

    /**
     * <code>repeated .Material EANGCGPDMBM = 13;</code>
     * @param values the eANGCGPDMBM to add
     * @return this
     */
    public GetBagScRsp addAllEANGCGPDMBM(final MaterialOuterClass.Material... values) {
      bitField0_ |= 0x00000080;
      eANGCGPDMBM.addAll(values);
      return this;
    }

    @Override
    public GetBagScRsp copyFrom(final GetBagScRsp other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        retcode = other.retcode;
        aGDPOHEPDDK = other.aGDPOHEPDDK;
        fCCFAPHDPIB.copyFrom(other.fCCFAPHDPIB);
        materialList.copyFrom(other.materialList);
        equipmentList.copyFrom(other.equipmentList);
        relicList.copyFrom(other.relicList);
        waitDelResourceList.copyFrom(other.waitDelResourceList);
        eANGCGPDMBM.copyFrom(other.eANGCGPDMBM);
      }
      return this;
    }

    @Override
    public GetBagScRsp mergeFrom(final GetBagScRsp other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasRetcode()) {
        setRetcode(other.retcode);
      }
      if (other.hasAGDPOHEPDDK()) {
        setAGDPOHEPDDK(other.aGDPOHEPDDK);
      }
      if (other.hasFCCFAPHDPIB()) {
        getMutableFCCFAPHDPIB().addAll(other.fCCFAPHDPIB);
      }
      if (other.hasMaterialList()) {
        getMutableMaterialList().addAll(other.materialList);
      }
      if (other.hasEquipmentList()) {
        getMutableEquipmentList().addAll(other.equipmentList);
      }
      if (other.hasRelicList()) {
        getMutableRelicList().addAll(other.relicList);
      }
      if (other.hasWaitDelResourceList()) {
        getMutableWaitDelResourceList().addAll(other.waitDelResourceList);
      }
      if (other.hasEANGCGPDMBM()) {
        getMutableEANGCGPDMBM().addAll(other.eANGCGPDMBM);
      }
      return this;
    }

    @Override
    public GetBagScRsp clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      retcode = 0;
      aGDPOHEPDDK = 0;
      fCCFAPHDPIB.clear();
      materialList.clear();
      equipmentList.clear();
      relicList.clear();
      waitDelResourceList.clear();
      eANGCGPDMBM.clear();
      return this;
    }

    @Override
    public GetBagScRsp clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      fCCFAPHDPIB.clear();
      materialList.clearQuick();
      equipmentList.clearQuick();
      relicList.clearQuick();
      waitDelResourceList.clearQuick();
      eANGCGPDMBM.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof GetBagScRsp)) {
        return false;
      }
      GetBagScRsp other = (GetBagScRsp) o;
      return bitField0_ == other.bitField0_
        && (!hasRetcode() || retcode == other.retcode)
        && (!hasAGDPOHEPDDK() || aGDPOHEPDDK == other.aGDPOHEPDDK)
        && (!hasFCCFAPHDPIB() || fCCFAPHDPIB.equals(other.fCCFAPHDPIB))
        && (!hasMaterialList() || materialList.equals(other.materialList))
        && (!hasEquipmentList() || equipmentList.equals(other.equipmentList))
        && (!hasRelicList() || relicList.equals(other.relicList))
        && (!hasWaitDelResourceList() || waitDelResourceList.equals(other.waitDelResourceList))
        && (!hasEANGCGPDMBM() || eANGCGPDMBM.equals(other.eANGCGPDMBM));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(aGDPOHEPDDK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        for (int i = 0; i < fCCFAPHDPIB.length(); i++) {
          output.writeRawByte((byte) 64);
          output.writeUInt32NoTag(fCCFAPHDPIB.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < materialList.length(); i++) {
          output.writeRawByte((byte) 10);
          output.writeMessageNoTag(materialList.get(i));
        }
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < equipmentList.length(); i++) {
          output.writeRawByte((byte) 18);
          output.writeMessageNoTag(equipmentList.get(i));
        }
      }
      if ((bitField0_ & 0x00000020) != 0) {
        for (int i = 0; i < relicList.length(); i++) {
          output.writeRawByte((byte) 58);
          output.writeMessageNoTag(relicList.get(i));
        }
      }
      if ((bitField0_ & 0x00000040) != 0) {
        for (int i = 0; i < waitDelResourceList.length(); i++) {
          output.writeRawByte((byte) 74);
          output.writeMessageNoTag(waitDelResourceList.get(i));
        }
      }
      if ((bitField0_ & 0x00000080) != 0) {
        for (int i = 0; i < eANGCGPDMBM.length(); i++) {
          output.writeRawByte((byte) 106);
          output.writeMessageNoTag(eANGCGPDMBM.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(aGDPOHEPDDK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += (1 * fCCFAPHDPIB.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(fCCFAPHDPIB);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * materialList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(materialList);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * equipmentList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(equipmentList);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += (1 * relicList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(relicList);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += (1 * waitDelResourceList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(waitDelResourceList);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += (1 * eANGCGPDMBM.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(eANGCGPDMBM);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public GetBagScRsp mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // retcode
            retcode = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // aGDPOHEPDDK
            aGDPOHEPDDK = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // fCCFAPHDPIB [packed=true]
            input.readPackedUInt32(fCCFAPHDPIB, tag);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 10) {
              break;
            }
          }
          case 10: {
            // materialList
            tag = input.readRepeatedMessage(materialList, tag);
            bitField0_ |= 0x00000008;
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // equipmentList
            tag = input.readRepeatedMessage(equipmentList, tag);
            bitField0_ |= 0x00000010;
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // relicList
            tag = input.readRepeatedMessage(relicList, tag);
            bitField0_ |= 0x00000020;
            if (tag != 74) {
              break;
            }
          }
          case 74: {
            // waitDelResourceList
            tag = input.readRepeatedMessage(waitDelResourceList, tag);
            bitField0_ |= 0x00000040;
            if (tag != 106) {
              break;
            }
          }
          case 106: {
            // eANGCGPDMBM
            tag = input.readRepeatedMessage(eANGCGPDMBM, tag);
            bitField0_ |= 0x00000080;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 64: {
            // fCCFAPHDPIB [packed=false]
            tag = input.readRepeatedUInt32(fCCFAPHDPIB, tag);
            bitField0_ |= 0x00000004;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.retcode, retcode);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.aGDPOHEPDDK, aGDPOHEPDDK);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRepeatedUInt32(FieldNames.fCCFAPHDPIB, fCCFAPHDPIB);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedMessage(FieldNames.materialList, materialList);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedMessage(FieldNames.equipmentList, equipmentList);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRepeatedMessage(FieldNames.relicList, relicList);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRepeatedMessage(FieldNames.waitDelResourceList, waitDelResourceList);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRepeatedMessage(FieldNames.eANGCGPDMBM, eANGCGPDMBM);
      }
      output.endObject();
    }

    @Override
    public GetBagScRsp mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 1097936398: {
            if (input.isAtField(FieldNames.retcode)) {
              if (!input.trySkipNullValue()) {
                retcode = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 953562517: {
            if (input.isAtField(FieldNames.aGDPOHEPDDK)) {
              if (!input.trySkipNullValue()) {
                aGDPOHEPDDK = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -699644354: {
            if (input.isAtField(FieldNames.fCCFAPHDPIB)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(fCCFAPHDPIB);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -2115854747:
          case -1149360970: {
            if (input.isAtField(FieldNames.materialList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(materialList);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2007143244:
          case 2109525167: {
            if (input.isAtField(FieldNames.equipmentList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(equipmentList);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 204814001:
          case 2071893482: {
            if (input.isAtField(FieldNames.relicList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(relicList);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -299057342:
          case -402862927: {
            if (input.isAtField(FieldNames.waitDelResourceList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(waitDelResourceList);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 2055744523: {
            if (input.isAtField(FieldNames.eANGCGPDMBM)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(eANGCGPDMBM);
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public GetBagScRsp clone() {
      return new GetBagScRsp().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static GetBagScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new GetBagScRsp(), data).checkInitialized();
    }

    public static GetBagScRsp parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetBagScRsp(), input).checkInitialized();
    }

    public static GetBagScRsp parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new GetBagScRsp(), input).checkInitialized();
    }

    /**
     * @return factory for creating GetBagScRsp messages
     */
    public static MessageFactory<GetBagScRsp> getFactory() {
      return GetBagScRspFactory.INSTANCE;
    }

    private enum GetBagScRspFactory implements MessageFactory<GetBagScRsp> {
      INSTANCE;

      @Override
      public GetBagScRsp create() {
        return GetBagScRsp.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName retcode = FieldName.forField("retcode");

      static final FieldName aGDPOHEPDDK = FieldName.forField("AGDPOHEPDDK");

      static final FieldName fCCFAPHDPIB = FieldName.forField("FCCFAPHDPIB");

      static final FieldName materialList = FieldName.forField("materialList", "material_list");

      static final FieldName equipmentList = FieldName.forField("equipmentList", "equipment_list");

      static final FieldName relicList = FieldName.forField("relicList", "relic_list");

      static final FieldName waitDelResourceList = FieldName.forField("waitDelResourceList", "wait_del_resource_list");

      static final FieldName eANGCGPDMBM = FieldName.forField("EANGCGPDMBM");
    }
  }
}
