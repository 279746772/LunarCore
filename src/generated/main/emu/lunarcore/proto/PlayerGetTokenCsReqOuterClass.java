// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.Utf8String;

public final class PlayerGetTokenCsReqOuterClass {
  /**
   * Protobuf type {@code PlayerGetTokenCsReq}
   */
  public static final class PlayerGetTokenCsReq extends ProtoMessage<PlayerGetTokenCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 KDPMIEPJMLN = 15;</code>
     */
    private int kDPMIEPJMLN;

    /**
     * <code>optional string token = 6;</code>
     */
    private final Utf8String token = Utf8String.newEmptyInstance();

    /**
     * <code>optional string uid = 7;</code>
     */
    private final Utf8String uid = Utf8String.newEmptyInstance();

    /**
     * <code>optional string unk1 = 8;</code>
     */
    private final Utf8String unk1 = Utf8String.newEmptyInstance();

    private PlayerGetTokenCsReq() {
    }

    /**
     * @return a new empty instance of {@code PlayerGetTokenCsReq}
     */
    public static PlayerGetTokenCsReq newInstance() {
      return new PlayerGetTokenCsReq();
    }

    /**
     * <code>optional uint32 KDPMIEPJMLN = 15;</code>
     * @return whether the kDPMIEPJMLN field is set
     */
    public boolean hasKDPMIEPJMLN() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 KDPMIEPJMLN = 15;</code>
     * @return this
     */
    public PlayerGetTokenCsReq clearKDPMIEPJMLN() {
      bitField0_ &= ~0x00000001;
      kDPMIEPJMLN = 0;
      return this;
    }

    /**
     * <code>optional uint32 KDPMIEPJMLN = 15;</code>
     * @return the kDPMIEPJMLN
     */
    public int getKDPMIEPJMLN() {
      return kDPMIEPJMLN;
    }

    /**
     * <code>optional uint32 KDPMIEPJMLN = 15;</code>
     * @param value the kDPMIEPJMLN to set
     * @return this
     */
    public PlayerGetTokenCsReq setKDPMIEPJMLN(final int value) {
      bitField0_ |= 0x00000001;
      kDPMIEPJMLN = value;
      return this;
    }

    /**
     * <code>optional string token = 6;</code>
     * @return whether the token field is set
     */
    public boolean hasToken() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional string token = 6;</code>
     * @return this
     */
    public PlayerGetTokenCsReq clearToken() {
      bitField0_ &= ~0x00000002;
      token.clear();
      return this;
    }

    /**
     * <code>optional string token = 6;</code>
     * @return the token
     */
    public String getToken() {
      return token.getString();
    }

    /**
     * <code>optional string token = 6;</code>
     * @return internal {@code Utf8String} representation of token for reading
     */
    public Utf8String getTokenBytes() {
      return this.token;
    }

    /**
     * <code>optional string token = 6;</code>
     * @return internal {@code Utf8String} representation of token for modifications
     */
    public Utf8String getMutableTokenBytes() {
      bitField0_ |= 0x00000002;
      return this.token;
    }

    /**
     * <code>optional string token = 6;</code>
     * @param value the token to set
     * @return this
     */
    public PlayerGetTokenCsReq setToken(final CharSequence value) {
      bitField0_ |= 0x00000002;
      token.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string token = 6;</code>
     * @param value the token to set
     * @return this
     */
    public PlayerGetTokenCsReq setToken(final Utf8String value) {
      bitField0_ |= 0x00000002;
      token.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string uid = 7;</code>
     * @return whether the uid field is set
     */
    public boolean hasUid() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional string uid = 7;</code>
     * @return this
     */
    public PlayerGetTokenCsReq clearUid() {
      bitField0_ &= ~0x00000004;
      uid.clear();
      return this;
    }

    /**
     * <code>optional string uid = 7;</code>
     * @return the uid
     */
    public String getUid() {
      return uid.getString();
    }

    /**
     * <code>optional string uid = 7;</code>
     * @return internal {@code Utf8String} representation of uid for reading
     */
    public Utf8String getUidBytes() {
      return this.uid;
    }

    /**
     * <code>optional string uid = 7;</code>
     * @return internal {@code Utf8String} representation of uid for modifications
     */
    public Utf8String getMutableUidBytes() {
      bitField0_ |= 0x00000004;
      return this.uid;
    }

    /**
     * <code>optional string uid = 7;</code>
     * @param value the uid to set
     * @return this
     */
    public PlayerGetTokenCsReq setUid(final CharSequence value) {
      bitField0_ |= 0x00000004;
      uid.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string uid = 7;</code>
     * @param value the uid to set
     * @return this
     */
    public PlayerGetTokenCsReq setUid(final Utf8String value) {
      bitField0_ |= 0x00000004;
      uid.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string unk1 = 8;</code>
     * @return whether the unk1 field is set
     */
    public boolean hasUnk1() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional string unk1 = 8;</code>
     * @return this
     */
    public PlayerGetTokenCsReq clearUnk1() {
      bitField0_ &= ~0x00000008;
      unk1.clear();
      return this;
    }

    /**
     * <code>optional string unk1 = 8;</code>
     * @return the unk1
     */
    public String getUnk1() {
      return unk1.getString();
    }

    /**
     * <code>optional string unk1 = 8;</code>
     * @return internal {@code Utf8String} representation of unk1 for reading
     */
    public Utf8String getUnk1Bytes() {
      return this.unk1;
    }

    /**
     * <code>optional string unk1 = 8;</code>
     * @return internal {@code Utf8String} representation of unk1 for modifications
     */
    public Utf8String getMutableUnk1Bytes() {
      bitField0_ |= 0x00000008;
      return this.unk1;
    }

    /**
     * <code>optional string unk1 = 8;</code>
     * @param value the unk1 to set
     * @return this
     */
    public PlayerGetTokenCsReq setUnk1(final CharSequence value) {
      bitField0_ |= 0x00000008;
      unk1.copyFrom(value);
      return this;
    }

    /**
     * <code>optional string unk1 = 8;</code>
     * @param value the unk1 to set
     * @return this
     */
    public PlayerGetTokenCsReq setUnk1(final Utf8String value) {
      bitField0_ |= 0x00000008;
      unk1.copyFrom(value);
      return this;
    }

    @Override
    public PlayerGetTokenCsReq copyFrom(final PlayerGetTokenCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        kDPMIEPJMLN = other.kDPMIEPJMLN;
        token.copyFrom(other.token);
        uid.copyFrom(other.uid);
        unk1.copyFrom(other.unk1);
      }
      return this;
    }

    @Override
    public PlayerGetTokenCsReq mergeFrom(final PlayerGetTokenCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasKDPMIEPJMLN()) {
        setKDPMIEPJMLN(other.kDPMIEPJMLN);
      }
      if (other.hasToken()) {
        getMutableTokenBytes().copyFrom(other.token);
      }
      if (other.hasUid()) {
        getMutableUidBytes().copyFrom(other.uid);
      }
      if (other.hasUnk1()) {
        getMutableUnk1Bytes().copyFrom(other.unk1);
      }
      return this;
    }

    @Override
    public PlayerGetTokenCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      kDPMIEPJMLN = 0;
      token.clear();
      uid.clear();
      unk1.clear();
      return this;
    }

    @Override
    public PlayerGetTokenCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      token.clear();
      uid.clear();
      unk1.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof PlayerGetTokenCsReq)) {
        return false;
      }
      PlayerGetTokenCsReq other = (PlayerGetTokenCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasKDPMIEPJMLN() || kDPMIEPJMLN == other.kDPMIEPJMLN)
        && (!hasToken() || token.equals(other.token))
        && (!hasUid() || uid.equals(other.uid))
        && (!hasUnk1() || unk1.equals(other.unk1));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(kDPMIEPJMLN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 50);
        output.writeStringNoTag(token);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 58);
        output.writeStringNoTag(uid);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 66);
        output.writeStringNoTag(unk1);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(kDPMIEPJMLN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(token);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(uid);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeStringSizeNoTag(unk1);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public PlayerGetTokenCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 120: {
            // kDPMIEPJMLN
            kDPMIEPJMLN = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // token
            input.readString(token);
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // uid
            input.readString(uid);
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // unk1
            input.readString(unk1);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.kDPMIEPJMLN, kDPMIEPJMLN);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeString(FieldNames.token, token);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeString(FieldNames.uid, uid);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeString(FieldNames.unk1, unk1);
      }
      output.endObject();
    }

    @Override
    public PlayerGetTokenCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1500575517: {
            if (input.isAtField(FieldNames.kDPMIEPJMLN)) {
              if (!input.trySkipNullValue()) {
                kDPMIEPJMLN = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 110541305: {
            if (input.isAtField(FieldNames.token)) {
              if (!input.trySkipNullValue()) {
                input.readString(token);
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 115792: {
            if (input.isAtField(FieldNames.uid)) {
              if (!input.trySkipNullValue()) {
                input.readString(uid);
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3594623: {
            if (input.isAtField(FieldNames.unk1)) {
              if (!input.trySkipNullValue()) {
                input.readString(unk1);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public PlayerGetTokenCsReq clone() {
      return new PlayerGetTokenCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static PlayerGetTokenCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new PlayerGetTokenCsReq(), data).checkInitialized();
    }

    public static PlayerGetTokenCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PlayerGetTokenCsReq(), input).checkInitialized();
    }

    public static PlayerGetTokenCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new PlayerGetTokenCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating PlayerGetTokenCsReq messages
     */
    public static MessageFactory<PlayerGetTokenCsReq> getFactory() {
      return PlayerGetTokenCsReqFactory.INSTANCE;
    }

    private enum PlayerGetTokenCsReqFactory implements MessageFactory<PlayerGetTokenCsReq> {
      INSTANCE;

      @Override
      public PlayerGetTokenCsReq create() {
        return PlayerGetTokenCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName kDPMIEPJMLN = FieldName.forField("KDPMIEPJMLN");

      static final FieldName token = FieldName.forField("token");

      static final FieldName uid = FieldName.forField("uid");

      static final FieldName unk1 = FieldName.forField("unk1");
    }
  }
}
