// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedEnum;
import us.hebi.quickbuf.RepeatedInt;

public final class SceneCastSkillCsReqOuterClass {
  /**
   * Protobuf type {@code SceneCastSkillCsReq}
   */
  public static final class SceneCastSkillCsReq extends ProtoMessage<SceneCastSkillCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 attacked_group_id = 5;</code>
     */
    private int attackedGroupId;

    /**
     * <code>optional uint32 skill_index = 7;</code>
     */
    private int skillIndex;

    /**
     * <code>optional uint32 LCFDKABNDLM = 8;</code>
     */
    private int lCFDKABNDLM;

    /**
     * <code>optional uint32 attacker_id = 13;</code>
     */
    private int attackerId;

    /**
     * <code>optional .MotionInfo target_motion = 10;</code>
     */
    private final MotionInfoOuterClass.MotionInfo targetMotion = MotionInfoOuterClass.MotionInfo.newInstance();

    /**
     * <code>repeated uint32 attacked_entity_id_list = 4;</code>
     */
    private final RepeatedInt attackedEntityIdList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated uint32 cast_entity_id_list = 11;</code>
     */
    private final RepeatedInt castEntityIdList = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .SceneCastSkill cast_skill_type = 2;</code>
     */
    private final RepeatedEnum<SceneCastSkillOuterClass.SceneCastSkill> castSkillType = RepeatedEnum.newEmptyInstance(SceneCastSkillOuterClass.SceneCastSkill.converter());

    private SceneCastSkillCsReq() {
    }

    /**
     * @return a new empty instance of {@code SceneCastSkillCsReq}
     */
    public static SceneCastSkillCsReq newInstance() {
      return new SceneCastSkillCsReq();
    }

    /**
     * <code>optional uint32 attacked_group_id = 5;</code>
     * @return whether the attackedGroupId field is set
     */
    public boolean hasAttackedGroupId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 attacked_group_id = 5;</code>
     * @return this
     */
    public SceneCastSkillCsReq clearAttackedGroupId() {
      bitField0_ &= ~0x00000001;
      attackedGroupId = 0;
      return this;
    }

    /**
     * <code>optional uint32 attacked_group_id = 5;</code>
     * @return the attackedGroupId
     */
    public int getAttackedGroupId() {
      return attackedGroupId;
    }

    /**
     * <code>optional uint32 attacked_group_id = 5;</code>
     * @param value the attackedGroupId to set
     * @return this
     */
    public SceneCastSkillCsReq setAttackedGroupId(final int value) {
      bitField0_ |= 0x00000001;
      attackedGroupId = value;
      return this;
    }

    /**
     * <code>optional uint32 skill_index = 7;</code>
     * @return whether the skillIndex field is set
     */
    public boolean hasSkillIndex() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 skill_index = 7;</code>
     * @return this
     */
    public SceneCastSkillCsReq clearSkillIndex() {
      bitField0_ &= ~0x00000002;
      skillIndex = 0;
      return this;
    }

    /**
     * <code>optional uint32 skill_index = 7;</code>
     * @return the skillIndex
     */
    public int getSkillIndex() {
      return skillIndex;
    }

    /**
     * <code>optional uint32 skill_index = 7;</code>
     * @param value the skillIndex to set
     * @return this
     */
    public SceneCastSkillCsReq setSkillIndex(final int value) {
      bitField0_ |= 0x00000002;
      skillIndex = value;
      return this;
    }

    /**
     * <code>optional uint32 LCFDKABNDLM = 8;</code>
     * @return whether the lCFDKABNDLM field is set
     */
    public boolean hasLCFDKABNDLM() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 LCFDKABNDLM = 8;</code>
     * @return this
     */
    public SceneCastSkillCsReq clearLCFDKABNDLM() {
      bitField0_ &= ~0x00000004;
      lCFDKABNDLM = 0;
      return this;
    }

    /**
     * <code>optional uint32 LCFDKABNDLM = 8;</code>
     * @return the lCFDKABNDLM
     */
    public int getLCFDKABNDLM() {
      return lCFDKABNDLM;
    }

    /**
     * <code>optional uint32 LCFDKABNDLM = 8;</code>
     * @param value the lCFDKABNDLM to set
     * @return this
     */
    public SceneCastSkillCsReq setLCFDKABNDLM(final int value) {
      bitField0_ |= 0x00000004;
      lCFDKABNDLM = value;
      return this;
    }

    /**
     * <code>optional uint32 attacker_id = 13;</code>
     * @return whether the attackerId field is set
     */
    public boolean hasAttackerId() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 attacker_id = 13;</code>
     * @return this
     */
    public SceneCastSkillCsReq clearAttackerId() {
      bitField0_ &= ~0x00000008;
      attackerId = 0;
      return this;
    }

    /**
     * <code>optional uint32 attacker_id = 13;</code>
     * @return the attackerId
     */
    public int getAttackerId() {
      return attackerId;
    }

    /**
     * <code>optional uint32 attacker_id = 13;</code>
     * @param value the attackerId to set
     * @return this
     */
    public SceneCastSkillCsReq setAttackerId(final int value) {
      bitField0_ |= 0x00000008;
      attackerId = value;
      return this;
    }

    /**
     * <code>optional .MotionInfo target_motion = 10;</code>
     * @return whether the targetMotion field is set
     */
    public boolean hasTargetMotion() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional .MotionInfo target_motion = 10;</code>
     * @return this
     */
    public SceneCastSkillCsReq clearTargetMotion() {
      bitField0_ &= ~0x00000010;
      targetMotion.clear();
      return this;
    }

    /**
     * <code>optional .MotionInfo target_motion = 10;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableTargetMotion()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public MotionInfoOuterClass.MotionInfo getTargetMotion() {
      return targetMotion;
    }

    /**
     * <code>optional .MotionInfo target_motion = 10;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public MotionInfoOuterClass.MotionInfo getMutableTargetMotion() {
      bitField0_ |= 0x00000010;
      return targetMotion;
    }

    /**
     * <code>optional .MotionInfo target_motion = 10;</code>
     * @param value the targetMotion to set
     * @return this
     */
    public SceneCastSkillCsReq setTargetMotion(final MotionInfoOuterClass.MotionInfo value) {
      bitField0_ |= 0x00000010;
      targetMotion.copyFrom(value);
      return this;
    }

    /**
     * <code>repeated uint32 attacked_entity_id_list = 4;</code>
     * @return whether the attackedEntityIdList field is set
     */
    public boolean hasAttackedEntityIdList() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <code>repeated uint32 attacked_entity_id_list = 4;</code>
     * @return this
     */
    public SceneCastSkillCsReq clearAttackedEntityIdList() {
      bitField0_ &= ~0x00000020;
      attackedEntityIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 attacked_entity_id_list = 4;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableAttackedEntityIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getAttackedEntityIdList() {
      return attackedEntityIdList;
    }

    /**
     * <code>repeated uint32 attacked_entity_id_list = 4;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableAttackedEntityIdList() {
      bitField0_ |= 0x00000020;
      return attackedEntityIdList;
    }

    /**
     * <code>repeated uint32 attacked_entity_id_list = 4;</code>
     * @param value the attackedEntityIdList to add
     * @return this
     */
    public SceneCastSkillCsReq addAttackedEntityIdList(final int value) {
      bitField0_ |= 0x00000020;
      attackedEntityIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 attacked_entity_id_list = 4;</code>
     * @param values the attackedEntityIdList to add
     * @return this
     */
    public SceneCastSkillCsReq addAllAttackedEntityIdList(final int... values) {
      bitField0_ |= 0x00000020;
      attackedEntityIdList.addAll(values);
      return this;
    }

    /**
     * <code>repeated uint32 cast_entity_id_list = 11;</code>
     * @return whether the castEntityIdList field is set
     */
    public boolean hasCastEntityIdList() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>repeated uint32 cast_entity_id_list = 11;</code>
     * @return this
     */
    public SceneCastSkillCsReq clearCastEntityIdList() {
      bitField0_ &= ~0x00000040;
      castEntityIdList.clear();
      return this;
    }

    /**
     * <code>repeated uint32 cast_entity_id_list = 11;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCastEntityIdList()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getCastEntityIdList() {
      return castEntityIdList;
    }

    /**
     * <code>repeated uint32 cast_entity_id_list = 11;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableCastEntityIdList() {
      bitField0_ |= 0x00000040;
      return castEntityIdList;
    }

    /**
     * <code>repeated uint32 cast_entity_id_list = 11;</code>
     * @param value the castEntityIdList to add
     * @return this
     */
    public SceneCastSkillCsReq addCastEntityIdList(final int value) {
      bitField0_ |= 0x00000040;
      castEntityIdList.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 cast_entity_id_list = 11;</code>
     * @param values the castEntityIdList to add
     * @return this
     */
    public SceneCastSkillCsReq addAllCastEntityIdList(final int... values) {
      bitField0_ |= 0x00000040;
      castEntityIdList.addAll(values);
      return this;
    }

    /**
     * <code>repeated .SceneCastSkill cast_skill_type = 2;</code>
     * @return whether the castSkillType field is set
     */
    public boolean hasCastSkillType() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>repeated .SceneCastSkill cast_skill_type = 2;</code>
     * @return this
     */
    public SceneCastSkillCsReq clearCastSkillType() {
      bitField0_ &= ~0x00000080;
      castSkillType.clear();
      return this;
    }

    /**
     * <code>repeated .SceneCastSkill cast_skill_type = 2;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCastSkillType()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedEnum<SceneCastSkillOuterClass.SceneCastSkill> getCastSkillType() {
      return castSkillType;
    }

    /**
     * <code>repeated .SceneCastSkill cast_skill_type = 2;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedEnum<SceneCastSkillOuterClass.SceneCastSkill> getMutableCastSkillType() {
      bitField0_ |= 0x00000080;
      return castSkillType;
    }

    /**
     * <code>repeated .SceneCastSkill cast_skill_type = 2;</code>
     * @param value the castSkillType to add
     * @return this
     */
    public SceneCastSkillCsReq addCastSkillType(
        final SceneCastSkillOuterClass.SceneCastSkill value) {
      bitField0_ |= 0x00000080;
      castSkillType.add(value);
      return this;
    }

    /**
     * <code>repeated .SceneCastSkill cast_skill_type = 2;</code>
     * @param values the castSkillType to add
     * @return this
     */
    public SceneCastSkillCsReq addAllCastSkillType(
        final SceneCastSkillOuterClass.SceneCastSkill... values) {
      bitField0_ |= 0x00000080;
      castSkillType.addAll(values);
      return this;
    }

    @Override
    public SceneCastSkillCsReq copyFrom(final SceneCastSkillCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        attackedGroupId = other.attackedGroupId;
        skillIndex = other.skillIndex;
        lCFDKABNDLM = other.lCFDKABNDLM;
        attackerId = other.attackerId;
        targetMotion.copyFrom(other.targetMotion);
        attackedEntityIdList.copyFrom(other.attackedEntityIdList);
        castEntityIdList.copyFrom(other.castEntityIdList);
        castSkillType.copyFrom(other.castSkillType);
      }
      return this;
    }

    @Override
    public SceneCastSkillCsReq mergeFrom(final SceneCastSkillCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasAttackedGroupId()) {
        setAttackedGroupId(other.attackedGroupId);
      }
      if (other.hasSkillIndex()) {
        setSkillIndex(other.skillIndex);
      }
      if (other.hasLCFDKABNDLM()) {
        setLCFDKABNDLM(other.lCFDKABNDLM);
      }
      if (other.hasAttackerId()) {
        setAttackerId(other.attackerId);
      }
      if (other.hasTargetMotion()) {
        getMutableTargetMotion().mergeFrom(other.targetMotion);
      }
      if (other.hasAttackedEntityIdList()) {
        getMutableAttackedEntityIdList().addAll(other.attackedEntityIdList);
      }
      if (other.hasCastEntityIdList()) {
        getMutableCastEntityIdList().addAll(other.castEntityIdList);
      }
      if (other.hasCastSkillType()) {
        getMutableCastSkillType().addAll(other.castSkillType);
      }
      return this;
    }

    @Override
    public SceneCastSkillCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      attackedGroupId = 0;
      skillIndex = 0;
      lCFDKABNDLM = 0;
      attackerId = 0;
      targetMotion.clear();
      attackedEntityIdList.clear();
      castEntityIdList.clear();
      castSkillType.clear();
      return this;
    }

    @Override
    public SceneCastSkillCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      targetMotion.clearQuick();
      attackedEntityIdList.clear();
      castEntityIdList.clear();
      castSkillType.clear();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof SceneCastSkillCsReq)) {
        return false;
      }
      SceneCastSkillCsReq other = (SceneCastSkillCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasAttackedGroupId() || attackedGroupId == other.attackedGroupId)
        && (!hasSkillIndex() || skillIndex == other.skillIndex)
        && (!hasLCFDKABNDLM() || lCFDKABNDLM == other.lCFDKABNDLM)
        && (!hasAttackerId() || attackerId == other.attackerId)
        && (!hasTargetMotion() || targetMotion.equals(other.targetMotion))
        && (!hasAttackedEntityIdList() || attackedEntityIdList.equals(other.attackedEntityIdList))
        && (!hasCastEntityIdList() || castEntityIdList.equals(other.castEntityIdList))
        && (!hasCastSkillType() || castSkillType.equals(other.castSkillType));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 40);
        output.writeUInt32NoTag(attackedGroupId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(skillIndex);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(lCFDKABNDLM);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 104);
        output.writeUInt32NoTag(attackerId);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawByte((byte) 82);
        output.writeMessageNoTag(targetMotion);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        for (int i = 0; i < attackedEntityIdList.length(); i++) {
          output.writeRawByte((byte) 32);
          output.writeUInt32NoTag(attackedEntityIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000040) != 0) {
        for (int i = 0; i < castEntityIdList.length(); i++) {
          output.writeRawByte((byte) 88);
          output.writeUInt32NoTag(castEntityIdList.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000080) != 0) {
        for (int i = 0; i < castSkillType.length(); i++) {
          output.writeRawByte((byte) 16);
          output.writeEnumNoTag(castSkillType.array()[i]);
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(attackedGroupId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(skillIndex);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(lCFDKABNDLM);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(attackerId);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(targetMotion);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += (1 * attackedEntityIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(attackedEntityIdList);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += (1 * castEntityIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(castEntityIdList);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += (1 * castSkillType.length()) + ProtoSink.computeRepeatedEnumSizeNoTag(castSkillType);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public SceneCastSkillCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 40: {
            // attackedGroupId
            attackedGroupId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 56) {
              break;
            }
          }
          case 56: {
            // skillIndex
            skillIndex = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // lCFDKABNDLM
            lCFDKABNDLM = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 104) {
              break;
            }
          }
          case 104: {
            // attackerId
            attackerId = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 82) {
              break;
            }
          }
          case 82: {
            // targetMotion
            input.readMessage(targetMotion);
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 34) {
              break;
            }
          }
          case 34: {
            // attackedEntityIdList [packed=true]
            input.readPackedUInt32(attackedEntityIdList, tag);
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 90) {
              break;
            }
          }
          case 90: {
            // castEntityIdList [packed=true]
            input.readPackedUInt32(castEntityIdList, tag);
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 18) {
              break;
            }
          }
          case 18: {
            // castSkillType [packed=true]
            input.readPackedEnum(castSkillType, tag);
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 32: {
            // attackedEntityIdList [packed=false]
            tag = input.readRepeatedUInt32(attackedEntityIdList, tag);
            bitField0_ |= 0x00000020;
            break;
          }
          case 88: {
            // castEntityIdList [packed=false]
            tag = input.readRepeatedUInt32(castEntityIdList, tag);
            bitField0_ |= 0x00000040;
            break;
          }
          case 16: {
            // castSkillType [packed=false]
            tag = input.readRepeatedEnum(castSkillType, tag);
            bitField0_ |= 0x00000080;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.attackedGroupId, attackedGroupId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.skillIndex, skillIndex);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.lCFDKABNDLM, lCFDKABNDLM);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.attackerId, attackerId);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeMessage(FieldNames.targetMotion, targetMotion);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRepeatedUInt32(FieldNames.attackedEntityIdList, attackedEntityIdList);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRepeatedUInt32(FieldNames.castEntityIdList, castEntityIdList);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRepeatedEnum(FieldNames.castSkillType, castSkillType);
      }
      output.endObject();
    }

    @Override
    public SceneCastSkillCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1725961965:
          case -715836621: {
            if (input.isAtField(FieldNames.attackedGroupId)) {
              if (!input.trySkipNullValue()) {
                attackedGroupId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1587034369:
          case -1716021916: {
            if (input.isAtField(FieldNames.skillIndex)) {
              if (!input.trySkipNullValue()) {
                skillIndex = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 935910222: {
            if (input.isAtField(FieldNames.lCFDKABNDLM)) {
              if (!input.trySkipNullValue()) {
                lCFDKABNDLM = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1960957712:
          case -660125531: {
            if (input.isAtField(FieldNames.attackerId)) {
              if (!input.trySkipNullValue()) {
                attackerId = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -716903257:
          case -2015521244: {
            if (input.isAtField(FieldNames.targetMotion)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(targetMotion);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -849608541:
          case 1628923710: {
            if (input.isAtField(FieldNames.attackedEntityIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(attackedEntityIdList);
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -182636805:
          case -1429767706: {
            if (input.isAtField(FieldNames.castEntityIdList)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(castEntityIdList);
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1457514324:
          case -1762790040: {
            if (input.isAtField(FieldNames.castSkillType)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedEnum(castSkillType, SceneCastSkillOuterClass.SceneCastSkill.converter());
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public SceneCastSkillCsReq clone() {
      return new SceneCastSkillCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static SceneCastSkillCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new SceneCastSkillCsReq(), data).checkInitialized();
    }

    public static SceneCastSkillCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SceneCastSkillCsReq(), input).checkInitialized();
    }

    public static SceneCastSkillCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new SceneCastSkillCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating SceneCastSkillCsReq messages
     */
    public static MessageFactory<SceneCastSkillCsReq> getFactory() {
      return SceneCastSkillCsReqFactory.INSTANCE;
    }

    private enum SceneCastSkillCsReqFactory implements MessageFactory<SceneCastSkillCsReq> {
      INSTANCE;

      @Override
      public SceneCastSkillCsReq create() {
        return SceneCastSkillCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName attackedGroupId = FieldName.forField("attackedGroupId", "attacked_group_id");

      static final FieldName skillIndex = FieldName.forField("skillIndex", "skill_index");

      static final FieldName lCFDKABNDLM = FieldName.forField("LCFDKABNDLM");

      static final FieldName attackerId = FieldName.forField("attackerId", "attacker_id");

      static final FieldName targetMotion = FieldName.forField("targetMotion", "target_motion");

      static final FieldName attackedEntityIdList = FieldName.forField("attackedEntityIdList", "attacked_entity_id_list");

      static final FieldName castEntityIdList = FieldName.forField("castEntityIdList", "cast_entity_id_list");

      static final FieldName castSkillType = FieldName.forField("castSkillType", "cast_skill_type");
    }
  }
}
